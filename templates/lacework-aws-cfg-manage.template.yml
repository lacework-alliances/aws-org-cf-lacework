AWSTemplateFormatVersion: 2010-09-09
Description: "Allows for automatic on-boarding/off-boarding of AWS accounts within your Lacework tenant. As new AWS accounts are added/updated/deleted within your AWS organization, the appropriate roles and permissions will be provisioned, and Lacework will be notified of the event. v1.1.4"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Parameter store values"
        Parameters:
          - LaceworkAccount
          - LaceworkSubAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - OrganizationID
          - OrganizationalUnits
          - ResourceNamePrefix
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - S3BucketName
          - S3KeyPrefix
    ParameterLabels:
      LaceworkAccount:
        default: Lacework Account (do not include '.lacework.net')
      LaceworkSubAccountName:
        default: Lacework Sub-Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      OrganizationID:
        default: Parent AWS Organization ID in which this CloudFormation template is being deployed (format = o-xxxx)
      OrganizationalUnits:
        default: Comma separated list of Organizational Units in which to deploy the StackSet (format = ou-xxxx)
      ResourceNamePrefix:
        default: Prefix for resources created by the StackSet
      S3BucketName:
        default: S3 Bucket for CloudFormation resources
      S3KeyPrefix:
        default: S3 Key Prefix for CloudFormation resources

Parameters:
  LaceworkAccount:
    Type: String
    Description: "Enter your Lacework account name. Do not include the '.lacework.net' at the end."
    MinLength: '1'
  LaceworkSubAccountName:
    Type: String
    Description: "If Lacework Organizations is enabled, enter the sub-account. Leave blank if Lacework Organizations is not enabled."
    Default: ''
    AllowedPattern: '^$|^[a-zA-Z0-9.]+(?:-[a-zA-Z0-9.]+)*$'
    ConstraintDescription: "Invalid Lacework account name entered. The account name may contain alphanumeric characters and dashes only."
  LaceworkAccessKeyID:
    Type: String
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Access Key ID contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Secret Key contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  OrganizationID:
    Type: String
    Description: "AWS Organization ID where these resources are being deployed into"
    AllowedPattern: '^o-[a-z0-9]{10,32}$'
    MinLength: '12'
    MaxLength: '45'
  OrganizationalUnits:
    Type: CommaDelimitedList
    Description: "Comma separated list of Organizational Units that the stackset will be deployed into"
  ResourceNamePrefix:
    Type: String
    Default: 'lw-stackset'
    Description: "Prefix for resources created by Lacework stackset"
    MinLength: '2'
    MaxLength: '45'
    # advanced
  S3BucketName:
    Type: String
    Default: lacework-alliances
    MinLength: '1'
    Description: "Enter the S3 bucket for Lacework Cloudformation assets. Use this if you want to customize your deployment."
  S3KeyPrefix:
    Type: String
    Default: lacework-organization-cfn
    MinLength: '1'
    Description: "Enter the S3 key prefix for Lacework Cloudformation assets directory. Use this if you want to customize your deployment."

Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'S3BucketName'
      Prefix: !Ref 'S3KeyPrefix'
      Objects:
        - '/lambda/LaceworkIntegrationSetup1.1.5.zip'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/${S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'S3KeyPrefix', '/lambda/LaceworkIntegrationSetup1.1.5.zip']]
      Handler: lw_integration_lambda_function.handler
      Runtime: python3.11
      Timeout: 900
      Environment:
        Variables:
          LW_ACCOUNT: !Ref LaceworkAccount
          LW_SUBACCOUNT: !Ref LaceworkSubAccountName
          LW_INT_PREFIX: "AWS"
      Role: !GetAtt LaceworkSetupFunctionRole.Arn

  LaceworkSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Setup_Operations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ApiKeySecretRead
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                Resource:
                  Ref: LaceworkApiCredentials
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkSetupFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LaceworkSetupFunction.Arn
      Principal: cloudformation.amazonaws.com

  LaceworkApiCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Lacework API Access Keys
      SecretString:
        Fn::Join:
          - ''
          - - '{"AccessKeyID":"'
            - Ref: LaceworkAccessKeyID
            - '","SecretKey":"'
            - Ref: LaceworkSecretKey
            - '","AccessToken": "0"'
            - ',"TokenExpiry": 0 }'

  LaceworkAccountSNS: # publishing to this SNS topic will trigger the Lacework integration Lambda Function
    Type: AWS::SNS::Topic

  LaceworkAccountSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: lwSNStopicpolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowWithinOrg
            Effect: Allow
            Principal: "*"
            Action: sns:Publish
            Resource: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID:
                  - !Ref OrganizationID
      Topics:
        - !Ref LaceworkAccountSNS

  LaceworkAccountSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LaceworkSetupFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref LaceworkAccountSNS

  LaceworkAccountSNSSubscription: # setup function subscribes to new SNS messages
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LaceworkSetupFunction.Arn
      Protocol: lambda
      TopicArn: !Ref LaceworkAccountSNS

  LaceworkStackset:
    Type: AWS::CloudFormation::StackSet
    DependsOn:
      - LaceworkAccountSNSLambdaPermission
      - LaceworkAccountSNSSubscription
      - LaceworkAccountSNSPolicy
      - LaceworkSetupFunctionPermission
    Properties:
      StackSetName: !Sub ${AWS::StackName}
      PermissionModel: SERVICE_MANAGED
      Capabilities:
        - CAPABILITY_NAMED_IAM
      OperationPreferences:
        FailureToleranceCount: 20
        MaxConcurrentPercentage: 100
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      Parameters:
        - ParameterKey: LaceworkAccount
          ParameterValue: !Ref LaceworkAccount
        - ParameterKey: MainAccountSNS
          ParameterValue: !Ref LaceworkAccountSNS
        - ParameterKey: ResourceNamePrefix
          ParameterValue: !Ref ResourceNamePrefix
        - ParameterKey: SecretArn
          ParameterValue: !GetAtt LaceworkApiCredentials.Id
      StackInstancesGroup:
        - Regions:
            - !Ref AWS::Region
          DeploymentTargets:
            OrganizationalUnitIds: !Ref OrganizationalUnits
      TemplateURL: !Sub "https://s3.amazonaws.com/${S3BucketName}/${S3KeyPrefix}/templates/lacework-aws-cfg-member.template.yml"
